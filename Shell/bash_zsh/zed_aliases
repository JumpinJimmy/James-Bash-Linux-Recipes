#######################################################################
#                G E N E R A L   A L I A S E S
#----------------------------------------------------------------------
alias path='echo -e ${PATH//:/\\n}' # clean path printing
alias rezed='source ~/.zshrc' # source bashrc for updates
alias hist='history'
alias h1='history 1'
alias h='history $1'
alias myip="ifconfig | grep 'inet addr'" # list active inet addresses
alias ltt="ls -lta" # list by time
alias ll="ls -lS" # list by size
alias lsl="ls -lSr" # list by reverse size
alias lx='ls -lhBX' # list by extension
alias lt='ls -lhrt' # list by date
alias tf='tail -f' # follow a file
alias cpr='cp -r' # recursive copy
alias mvv='mv -v' # move verbose
alias dfind='find -type d -name' # find directory name
alias ffind='find -type f -name' # find file name
alias lsd='find . -maxdepth 1 -type d | sort' #list directories in sorted order
alias chux='chmod u+x' # add exec permission current user for file
alias zedrc='vim ~/.zshrc && source ~/.zshrc' # open bashrc file in vim and source
alias edalias='subl ~/.zed_aliases'
alias lsm='ls -lAhG --color=auto'
alias cls='clear;lsm'
alias ..="cd .."
alias cdd="cd .."
alias cd..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias .4='cd ../../../../'
alias .5='cd ../../../../..'
alias -- -='cd -' #goto previous dir

# KWS BARK ENV VARS

#######################################################################
#        S H E L L  S T Y L E  &  M I S C  H E L P E R S
#----------------------------------------------------------------------
# COLORS: https://github.com/arcticicestudio
export NORD_SUCCESS="\e[1;32m"
export NORD_WARNING="\e[1;33m"
export NORD_HIGHLIGHT="\e[1;34m"
export NORD_PURP="\e[0;35m"
export NORD_HIGHLIGHT="\e[1;34m"
export NORD_PRIMARY="\e[0;36m"
export NORD_RESET="\e[0;37m"
export NORD_BLUBLK="\e[44;30m"
export JDEV_STYLE_NC="\033[0m"
export JDEV_STYLE_BOLD="\033[1m"
export JDEV_STYLE_RED="\033[0;31m"

testcolor() {
    # test NORDIC Colors
    local -a env_color_array
    local color_string=""
    color_list="printenv | grep NORD"
    IFS=$'\n' env_color_array=($(eval ${color_list}))

    for envvar in $env_color_array; do
        local color_variable=$envvar
        eval "ansi_color_value=\"\${$envvar}\""
        color_string="$color_string$ansi_color_value$color_variable${NORD_RESET}"
    done
    # cleanup
    echo -e "$color_string"
    unset color_string
    unset ansi_color_value
    unset color_list
    unset -v env_color_array
}
# Associative zsh array for NORDIC colors
test_assoc_color() {
    local -a env_color_array # env variable array
    declare -A color_assoc; # associative array a[variable_name]=ansi_color_value
    local color_string="" # final string to display
    color_list="printenv | grep NORD"
    # read in variables
    IFS=$'\n' env_color_array=($(eval ${color_list}))
    for envvar in $env_color_array; do
        local color_variable=$envvar
        # Get Value of variable and assign
        eval "ansi_color_value=\"\${$envvar}\""
        # assign name of var - Dereference target variable
        eval "variable_name=\"\${color_variable}\""
        # strip off "=" char
        variable_name=${variable_name%=*}
        # add to associative array
        color_assoc[$variable_name]=$ansi_color_value
    done
    # display result
    echo -e "$color_string"

    # print associative array without style
    printf '%s => %s\n' ${(kv)color_assoc}
    print_banner "\n"
    # print assocative array with style
    for k in "${(@k)color_assoc}"; do
      echo -e "\n$color_assoc[$k]$k -> $color_assoc[$k]"
    done
    # cleanup
    unset -v color_assoc
    unset ansi_color_value
    unset variable_name
    unset color_list
}

# Color Echo
cecho () {
# \e[attribute code;text color code;background color codem
# https://github.com/arcticicestudio/nord-gnome-terminal
    declare -A colors;
    colors=("prim" "$NORD_PRIMARY" "warn" "$NORD_WARNING")
    local defaultMSG="No message passed.";
    local defaultColor="black";
    local defaultNewLine=true;

    while [[ $# -gt 1 ]]; do
      key="$1";
      case $key in
          -c|--color)
              color="$2";
              shift;
          ;;
          -n|--noline)
              newLine=false;
          ;;
          *) # unknown option
          ;;
      esac
      shift;
    done

    message=${1:-$defaultMSG};   # Defaults to default message.
    color=${color:-$defaultColor};   # Defaults to default color, if not specified.
    newLine=${newLine:-$defaultNewLine};
    echo -e "${colors[$color]}$message${NORD_RESET}";
    if [ "$newLine" = true ] ; then
        echo;
    fi
    tput sgr0; #  Reset text attributes to normal without clearing screen.

    return;
}

warning () {
    cecho -c 'yellow' "$@";
}

print_banner() {
    local JD_STYLE_SPAD=$(printf '%0.1s' "-"{1..30})
    local JD_STYLE_LPAD=$(printf '%0.1s' "-"{1..60})
    echo -e "\n${JD_STYLE_LPAD}\n${JD_STYLE_SPAD}"
    echo -e $1
    echo -e "${JD_STYLE_SPAD}\n${JD_STYLE_LPAD}"
}

# simple Yes or No prompt
asksure() {
    local raise_question=$1
    echo -ne "$raise_question (Y/N) "
    while read -r -n 1 -S answer; do
      if [[ $answer = [YyNn] ]]; then
        [[ $answer = [Yy] ]] && retval=0
        [[ $answer = [Nn] ]] && retval=1
        break
      fi
    done
    echo # just a final linefeed,
    return $retval
}
#######################################################################
#                G I T  H E L P E R  A L I A S E S
#----------------------------------------------------------------------
alias gicl="git clean -xfd -f" # clean current repo
alias gco="git checkout"
alias gc="git commit -m"
alias gd='git diff'
alias gdh='git diff HEAD'
alias gb="git branch"
alias gst="git status"
alias gull="git pull"
alias gsh="git show"
alias gad="git add"
alias gap="git add -p"
alias grull="git pull --rebase origin $1"
alias gmsq="git merge --squash ${1}"
alias ghist="git log --pretty=format:\\ \"%C(bold red)%h%Creset %C(cyan)|%Creset %ad%Cgreen(%ar)%Creset %C(cyan)|%Creset %s%C(yellow)%d%Creset %Cblue[%an]%Creset\\ \" --graph --date=short"
alias gipl="git log --pretty=format:\"%Cred%h%Creset -%C(yellow)%an%Creset %Cgreen(%ar)%Creset: %s\""
alias aauth="sudo /apollo/bin/runCommand -a Activate -e AAAWorkspaceSupport"
alias fb="git branch -a --contains $1;" # find branch
alias gdf="gd ${1} origin"
alias gdn="gd --name-only" # show files with changes
alias glogf="git log --follow $1 --pretty=format:\"%Cred%h%Creset -%C(yellow)%an%Creset %Cgreen(%ad)%Creset: %s\" --date=short" # git log for specific file
alias gcontributors="git shortlog --summary --numbered" # List contributors with number of commits


##############################################
# git commit, interactive without arg -or-
# gic "your message"
function gic() {
  local commitmessage
  if [ "" = "$1" ]; then
    echo -n "${NORD_PRIMARY}Commit message: ${NORD_RESET}"
    commitmessage="$(ruby -e "puts gets")"
    git commit -m "$commitmessage"
  else
    git commit -m "$1"
  fi
}

function gnewbranch() {
  local branchname
  if [ "" = "$1" ]; then
    echo -n 'branch name: '
    branchname="$(ruby -e "puts gets")"
    git checkout -b "$branchname"
  else
    git checkout -b "$1"
  fi
}

gcleanmain() {
  gco .
  gicl
  gco mainline
  gull
}

check_isgit() {
  local targ_directory=$1
  if git -C ${targ_directory} rev-parse >/dev/null 2>&1; then
    return 0
  else
    echo "${NORD_WARNING}Not a GIT Repo: $targ_directory${NORD_RESET}"
    return 1
  fi
}

search_untracked() {
  local git_repo=$1
  cd ${git_repo} >/dev/null 2>&1
  if [[ `git status --porcelain` ]]; then
    echo "${NORD_WARNING}$git_repo:${NORD_RESET} Unstaged changes"
    git status
    return 0
  else
    echo "${NORD_WARNING}$git_repo:${NORD_RESET} No Unstaged Changes"
    return 1
  fi
}

walk_gstatus() {
    # from current directory,
    # for each local dir that is a git repo, run git status
    local -a dir_array
    local_dir_list="find . -maxdepth 1 -type d ! -path ."
    IFS=$'\n' dir_array=($(eval ${local_dir_list}))
    for file in $dir_array; do
        local targ_directory=$file
        if check_isgit $targ_directory; then
            search_untracked $targ_directory
        fi
        cd -  >/dev/null 2>&1 # return to prev dir
    done
}
